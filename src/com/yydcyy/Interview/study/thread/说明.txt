VolatileDemo  2019年7月23日    演示volatile 可见性, 无原子性

SingletonDemo 2019年7月23日    单例模式中的懒汉式, 采用 DCL , 并加入 volatile 轻量锁避免指令重排

CASDemo 2019年7月23日

ABADemo 2019年7月23日  没完, 待补

AtomicReferenceDemo 2019年7月23日

ContainerNotSafeDemo 2019年7月23日

SpinLockDemo

ReadWriteLockDemo 2019年7月24日    读写分离Demo 看 main()方法效果[读成对出现, 写无所谓], MyCache_Before 方法会脏读, MyCache_After 方法加锁,写成对

CountryEnum
CountDownLatchDemo 2019年7月24日    枚举使用. 写成类直接调用, 值得学习.  多线程计数器, 模拟教室关门场景

CyclicBarrierDemo 2019年7月24日    Demo, "集齐七颗龙珠, 召唤神龙", 也是设计屏障, 到达count 执行命令. 此方法是 "增" , CountDownLatch 是 "减"

BlockingQueueDemo 2019年7月24日    说明AddAndRemoveDemo();  OfferAndPoolDemo();  OfferDemo();三对添加方式 API Demo

SynchronousQueue 2019年7月24日    Synchronous: 不存储元素的阻塞队列, 即单个元素的队列 [专属] 即取出才可放入.

ProdConsumer_TraditionDemo 2019年7月25日     传统方式多线程实现. 面试考点: 多线程判断用While而非 if(), 防止spurious wakeup 虚假唤醒否则控制不了 0,1交替.;具体看 API 文档说明,

SynAndReetrantLockDemo 2019年7月26日01:30:45 synchronized 和 Lock 有什么区别 ?用新的lock有什么好处? 并实现 三个线程{A[打印1-5],B[打印1-10]C[打印1-15] }重复10遍 的例子

ProdConsumer_BlockQueueDemo 2019年7月26日11:41:54  生产消费者v3, 阻塞队列版, 涉及 volatile / CAS / atomicInteger / BlockQueue / 线程交互 / 原子引用 .  有点问题, 锁好像没作用. 看老半天没发现啥问题,再说

CallableDemo 2019年7月26日14:57:12    Runnable 和 Callable 通过FeatureTask联系起来, 适配者模式